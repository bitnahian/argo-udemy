apiVersion: argoproj/v1alpha
kind: Workflow
metadata:
  generateName: wf-exercise-two-
spec:
  entrypoint: dag-template
  volumes:
  - name: notification-email-vol
    secret:
      secretName: notification-email
  arguments:
    parameters:
    - name: word-detect
      value: money
  templates:
  - name: dag-template
    inputs:
      parameters:
      - name: word-detect
    dag:
      tasks:
      - name: get-source
        template: get-source-template
      - name: read-emails
        template: read-emails-template
        arguments:
          artifacts: [{ name: emails-in, from: "{{tasks.get-source.outputs.artifacts.emails-out}}"}]
        depends: get-source.Succeeded
      - name: dag-loop
        template: dag-loop-template
        depends: read-emails.Succeeded
        arguments:
          parameters:
          - name: text
            value: "{{item.text}}"
          - name: sender
            value: "{{item.sender}}"
          - name: word-detect
            value: "{{inputs.parameters.word-detect}}"
        withParam: "{{tasks.read-emails.outputs.result}}" 


  - name: get-source-template
    script:
      image: ubuntu:20.04
      command: [sh]
      source: |
        apt-get update
        apt-get install -y curl
        mkdir source-file
        cd source-file
        curl $SOURCE_URL -o emails.csv
      env:
      - name: SOURCE_URL
        valueFrom:
          secretKeyRef:
            name: source-url-secret
            key: source-url
    outputs:
      artifacts:
      - name: emails-out
        path: /source-file/emails.csv

  - name: read-emails-template
    inputs:
      artifacts:
      - name: emails-in
        path: /tmp/emails.csv
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        import json
        import sys

        with open("/tmp/emails.csv", "r") as f:
          lines = f.readlines()
          lines = [x.strip().split(";") for x in lines]
          json.dump([{lines[0][0]: i[0].strip(""), lines[0][1]: i[1]} for i in lines[1:]], sys.stdout)
  
  - name: dag-loop-template
    inputs:
      parameters:
      - name: sender
      - name: text
      - name: word-detect
    dag:
      tasks:
      - name: detect
        template: detect-template
        arguments:
          parameters:
          - name: text
            value: "{{inputs.parameters.text}}"
          - name: word-detect
            value: "{{inputs.parameters.word-detect}}"
      - name: email-detected
        template: email-detected-template
        arguments:
          parameters:
          - name: text
            value: "{{inputs.parameters.text}}"
          - name: sender
            value: "{{inputs.parameters.sender}}"
        depends: detect.Succeeded
        when: "{{tasks.detect.outputs.result}} == DETECTED"
  
  - name: detect-template
    inputs:
      parameters:
      - name: text
      - name: word-detect
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        if "{{inputs.parameters.word-detect}}" in "{{inputs.parameters.text}}":
          print("DETECTED")
        else:
          print("OK")

  - name: email-detected-template
    inputs:
      parameters:
      - name: text
      - name: sender
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        with open("/secrets/notification-email", "r") as f:
          notification_email = f.read()
        
        print("...")
        print("...")
        print("...")
        
        with open("/tmp/email_detected.txt", "w") as f:
          email_detected = f""" 
            Sender: {{inputs.parameters.sender}}
            Receiver: {notification_email}
            Text: {{inputs.parameters.text}}
          """
          f.write(email_detected)
      volumeMounts:
      - name: notification-email-vol
        mountPath: /secrets
    outputs:
      artifacts:
        - name: email-detected
          path: /tmp/email_detected.txt
          